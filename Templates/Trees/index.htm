<!doctype html>
<html lang="en">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>ARIA Trees - Apex 4X Technical Style Guide</title>
    <meta name="description" content="Scalable ARIA Components" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="stylesheet"
      type="text/css"
      href="../_common/_doc_files/css/global.css"
    />
    <link
      rel="stylesheet"
      type="text/css"
      href="../_common/_doc_files/prism.css"
    />
    <link
      rel="stylesheet"
      type="text/css"
      href="../_common/_doc_files/css/components-style.css"
    />
    <script src="../_common/_doc_files/prism.js"></script>
  </head>

  <body>
    <div class="outer-wrapper">
      <header class="header">
        <div class="logo">
          <a href="https://whatsock.com">
            <img
              alt="WhatSock : Changing the world one step at a time"
              src="/Templates/_common/_doc_files/img/whatsock.svg"
            />
          </a>
        </div>
      </header>
      <div class="wrapper">
        <main id="main" class="main">
          <h1><strong>ARIA Trees</strong></h1>
          <nav class="navigation--parent">
            <p>
              <a href="/Tutorials/Beginner-Introduction.htm"
                >Beginner Tutorial</a
              >
            </p>
            <h2 class="parent--page">Template Examples</h2>
            <ul>
              <li><a href="../index.htm">Back to Components</a></li>
              <li><a href="External/index.htm">External</a></li>
              <li><a href="Internal/index.htm">Internal</a></li>
            </ul>
          </nav>
          <section class="section--instructions">
            <h2>Expected behaviors</h2>

            <p>
              Ensure that each tree has only one tab stop and that available
              tree items can be navigated using the arrow keys in the same
              manner as a native Windows TreeView control.
            </p>

            <p>
              The 4X ARIA Tree module automatically configures all required ARIA
              attributes and focus handling, in strict accordance with the ARIA
              specification.
            </p>

            <p>
              The following attributes are handled automatically by the Tree
              module:
            </p>

            <ul>
              <li>role=tree</li>
              <li>role=group</li>
              <li>role=treeitem</li>
              <li>aria-expanded</li>
              <li>aria-checked</li>
              <li>aria-owns</li>
              <li>aria-level</li>
              <li>aria-multiselectable</li>
              <li>aria-selected</li>
              <li>tabindex</li>
            </ul>

            <p>Available attributes for tree item links:</p>

            <ul>
              <li>
                data-controls : The resource path and pointer to the ID
                attribute of the subtree container element.
              </li>
              <li>
                data-check : May be set to "false", "true", or "mixed" to set
                the current state of a checkbox tree item when rendered.
              </li>
            </ul>

            <h2>HTML syntax</h2>

            <h3>Standard Tree</h3>

            <div>
              <pre><code class="language-markup">&lt;ul class="aria-tree top">
  &lt;li>
    &lt;a>
      Name One
    &lt;/a>

    &lt;ul>
      &lt;li>
        &lt;a>
          Name Two
        &lt;/a>
      &lt;/li>
    &lt;/ul>

  &lt;/li>
&lt;/ul></code></pre>
            </div>

            <h3>Standard Tree Including Checkable Items</h3>

            <div>
              <pre><code class="language-markup">&lt;ul class="aria-tree top">
  &lt;li>
    &lt;a>
      Name One
    &lt;/a>

    &lt;ul>
      &lt;li>
        &lt;a data-check >
          Name Two
        &lt;/a>
      &lt;/li>
    &lt;/ul>

  &lt;/li>
&lt;/ul></code></pre>
            </div>

            <p>
              IMPORTANT: An ARIA Tree must never include any other active
              elements other than those specified as tree items. Otherwise, all
              such additional active elements will be undiscoverable and
              inaccessible to non-sighted screen reader users.
            </p>

            <p>
              Whenever a hidden checkbox is embedded within a checkable tree
              item element, it will automatically reflect the toggled state of
              the parent element. This makes it possible to implement custom
              toggle controls that can be submitted in the same manner as native
              form controls. This, however, is optional, and may be removed
              without having any negative impact on the functionality of the
              simulated toggle control.
            </p>

            <h2>JavaScript syntax</h2>

            <div>
              <pre><code class="language-javascript">var myTreeDC = $A.setTree( DOMNodeOrCSSSelectorForRootContainer, {
// Configure functionality key / value mappings
});</code></pre>
            </div>

            <ul>
              <li>Module file: Tree.js</li>
              <li>Requires: AccName.js, RovingTabIndex.js.</li>
              <li>Recommended: Velocity.js, VelocityUI.js.</li>
            </ul>

            <h2>Parameters</h2>

            <ol>
              <li>
                A DOM element or CSS selector to specify the top level container
                element of the tree structure
              </li>
              <li>A configuration map to customize behaviors and options</li>
            </ol>

            <p>
              If there is no tree structure to reference, the configuration map
              can be passed as the first parameter.
            </p>

            <h3>Configuration</h3>

            <div>
              <pre><code class="language-javascript">{

// Optionally specify the content to be rendered when referencing external content.
// If set, the content property will be auto-populated with the returned content.
fetch: {
url: "path/file.htm",
data: {
selector: "#uniqueId"
}
},

// Optionally specify a DOM node where the tree will be inserted within.
// Only applicable when fetching an external tree structure to render.
root: undefined,

// Optionally toggle the hidden attribute instead of inserting the tree content when rendered.
    toggleHide: true,

// Preload markup in the background when using the Fetch API to load external content.
preload: true,

// Preload images in the background when using the Fetch API to load external content.
preloadImages: true,

tag: {

// CSS selector for the top level tree container.
parent: "ul",

// The CSS selector that identifies the focusable active element within each child tag markup.
// Only one focusable element is allowed within each child tag.
// If the child tag markup is changed, this selector must also be changed to point to the focusable active element within that markup.
child: "a",

// Return an array of all focusable child elements within the tree container element.
parse: function(ref) {
if ($A.isIE()) {
var mItems = [];
$A.query(ref.children, function(i, o) {
var c = $A.first(o, function(e) {
if (e.nodeName.toLowerCase() === "a")
return true;
});
if ($A.isNode(c)) mItems.push(c);
});
return mItems;
} else
return ref.querySelectorAll(":scope > * > a");
}

},

// Set a custom event handler to process every time a tree item is activated.
onActivate: function(event, triggerNode, RTI, boundElement, currentState, set) {
// If the tree item is checkable, currentState will include a number from 0 to 2.
// (0 = "false", 1 = "true", 2 = "mixed".)
// The set function can be used to set a new state for the option.
// E.G. set("false"), set("true"), or set("mixed") for checkbox tree items only.
},

// Optionally run a script after the tree finishes rendering.
afterRender: function(DC) {
// DC.container includes the rendered tree content.
},

// Optionally run a script after the tree is removed.
afterRemove: function(DC) {
// Do something.
},

// Optionally specify a render and remove animation effect for the tree.
// Requires the "Animate" module import to function, which is powered by Velocity.js.
// To ignore animation effects, delete the animate object declaration entirely from the setup script.
// View implementations within "Templates/Trees" for practical animation usage examples.

style: { display: "none" }, // Set the initial state to hidden in prep for animation.

animate: {

onRender: function(dc, wrapper, next) {

// Specify the render animation effect, including the callback function statement to execute when the animation effect completes.
Velocity(wrapper, "transition.TYPE", {
// Velocity options here, plus the callback declaration after the animation completes.
complete: function() {
next(); // REQUIRED: next() must be executed so control is passed back to 4X for rendering.
}
});

},

onRemove: function(dc, wrapper, next) {

// Specify the removal animation effect, including the callback function statement to execute when the animation effect completes.
Velocity(wrapper, "transition.TYPE", {
// Velocity options here, plus the callback declaration after the animation completes.
complete: function() {
next(); // REQUIRED: next() must be executed so control is passed back to 4X for removal.
}
});

}

},

// Optionally extend the RTI instance with custom event handlers.
// For available options, view the RovingTabIndex help doc at "Help/Module Imports/Actions/RovingTabIndex".
extendRTI: {
// Optional event handlers.
}

// Additional DC API properties and methods can be declared here also to customize functionality and behavior.
// To view available options, reference the help docs located at: "Help/DC API/DC Object Configuration"

}</code></pre>
            </div>
          </section>
        </main>
      </div>
      <footer class="footer">
        <div class="flex-container-row">
          <div class="flex-item">
            <h2>License</h2>
            <p>
              Apex 4X including all template design patterns is distributed
              under the terms of the Open Source Initiative OSI - MIT License,
              and may be freely used for any purpose within any web technology.
            </p>
          </div>
          <div class="flex-item">
            <h2>Resources</h2>
            <ul>
              <li>
                <a target="ext" href="https://github.com/WhatSock/apex"
                  >Apex 4X on GitHub</a
                >
              </li>
              <li>
                <a
                  target="ext"
                  href="https://whatsock.github.io/visual-aria/github-bookmarklet/visual-aria.htm"
                  >Visual ARIA Bookmarklet</a
                >
              </li>
              <li>
                <a
                  target="ext"
                  href="https://chrome.google.com/webstore/detail/visual-aria/lhbmajchkkmakajkjenkchhnhbadmhmk"
                  >Visual ARIA Chrome Extension</a
                >
              </li>
              <li>
                <a
                  target="ext"
                  href="https://addons.mozilla.org/en-US/firefox/addon/visual-aria/"
                  >Visual ARIA Firefox Extension</a
                >
              </li>
              <li>
                <a target="ext" href="https://github.com/AccDC/visual-aria"
                  >Visual ARIA on GitHub</a
                >
              </li>
              <li>
                <a target="ext" href="https://whatsock.com/training/matrices/"
                  >ARIA Role Conformance Matrices</a
                >
              </li>
              <li>
                <a target="ext" href="https://whatsock.com/training/"
                  >Accessibility Tree Training Guide</a
                >
              </li>
            </ul>
          </div>
          <div class="flex-item">
            <h2>Acknowledgements</h2>
            <ul class="list--horizontal">
              <li>
                Author and developer:
                <a target="ext" href="https://www.linkedin.com/in/bgaraventa"
                  >Bryan Garaventa</a
                >
              </li>
              <li>
                Website designer:
                <a target="ext" href="https://gericci.me/">Angela Ricci</a>
              </li>
              <li>
                Style and markup editor:
                <a
                  target="ext"
                  href="https://www.linkedin.com/in/laurence-lewis-77520365/"
                  >Laurence Lewis</a
                >
              </li>
            </ul>
          </div>
        </div>
      </footer>
    </div>
  </body>

  <script
    async
    src="https://api.whatsock.com/accdc-updates.js?4x=template"
  ></script>
</html>
